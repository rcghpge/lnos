name: LN OS CI/CD (Sandbox)

on:
  push:
    branches: [sandbox]
  schedule:
    - cron: '0 3 * * 6'
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sandbox branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: sandbox
          persist-credentials: false

      - name: Set up Git credentials
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Set authenticated GitHub remote
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git

      - name: Fetch origin and backup sandbox
        run: |
          set -euo pipefail

          git fetch origin

          TIMESTAMP="$(date +%Y%m%d%H%M%S)"
          BACKUP_BRANCH="sandbox-recovery-${TIMESTAMP}"

          if [ -z "${BACKUP_BRANCH}" ]; then
            echo "::error::BACKUP_BRANCH is empty."
            exit 1
          fi

          echo "üì¶ Creating backup branch: ${BACKUP_BRANCH}"
          git checkout -B "${BACKUP_BRANCH}" origin/sandbox
          git remote -v
          git branch
          git log --oneline -n 1
          git push origin "${BACKUP_BRANCH}"

      - name: Rebase sandbox with origin/main (skip or resolve)
        run: |
          git checkout sandbox
          git fetch origin
          git rebase origin/main || {
            echo "::warning::Conflict detected. Checking conflicted files."

            CONFLICT_FILES=$(git diff --name-only --diff-filter=U)
            if echo "$CONFLICT_FILES" | grep -qE "ci-main\.yml|ci-sandbox\.yml"; then
              echo "::notice::Skipping conflicting commit (likely unrelated to sandbox)."
              git rebase --skip || {
                echo "::error::Rebase skip failed. Aborting."
                git rebase --abort
                exit 1
              }
            else
              echo "::error::Unhandled rebase conflict. Manual intervention required."
              git rebase --abort
              exit 1
            fi
          }

      - name: Pull latest sandbox before push
        run: git pull --rebase origin sandbox

      - name: Push sandbox (if fast-forward)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
          git push origin sandbox || {
            echo "::warning::Push failed. Manual sync required."
            exit 0
          }

      - name: Tag sandbox pre-release
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=$(git rev-parse --short HEAD)
          PRERELEASE_TAG="v0.0.1-sandbox+${TIMESTAMP}-${SHORT_SHA}"
          git tag "$PRERELEASE_TAG"
          git push origin "$PRERELEASE_TAG"
          echo "üè∑Ô∏è Tagged sandbox release: $PRERELEASE_TAG"
