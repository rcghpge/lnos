name: LN OS CI/CD

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 3 * * 6'
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Set workflow for origin/main branch only
        if: github.ref != 'refs/heads/main'
        run: |
          echo "üö´ This workflow is restricted to 'main' branch only. Exiting."
          exit 1

      - name: Checkout from fork
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Git credentials
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Set authenticated GitHub remote
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git

      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/uta-lug-nuts/LnOS.git
          git fetch upstream

      - name: Backup sandbox builds before rebase
        run: |
          git fetch origin
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BACKUP_BRANCH="sandbox-recovery-$TIMESTAMP"
          git branch "$BACKUP_BRANCH" origin/main
          git push origin "$BACKUP_BRANCH"
          echo "üì¶ Backup branch pushed: $BACKUP_BRANCH"

      - name: Rebase fork main with upstream/main
        run: |
          git checkout main
          git rebase upstream/main

      - name: Compare diffs with upstream/main
        run: |
          echo "üîç Comparing origin/main with upstream/main..."
          BEHIND=$(git log origin/main..upstream/main --oneline | wc -l)
          AHEAD=$(git log upstream/main..origin/main --oneline | wc -l)
          echo "üìâ Commits behind upstream: $BEHIND"
          echo "üìà Commits ahead of upstream: $AHEAD"
          if [ "$BEHIND" -eq 0 ] && [ "$AHEAD" -eq 0 ]; then
            echo "‚úÖ Fork is perfectly in sync with upstream/main."
          elif [ "$BEHIND" -gt 0 ]; then
            echo "::warning: ‚ö†Ô∏è Fork is $BEHIND commits behind upstream."
          elif [ "$AHEAD" -gt 0 ]; then
            echo "::warning: üöÄ Fork is $AHEAD commits ahead of upstream."
          fi

      - name: Pull latest from fork before push
        run: git pull --rebase origin main

      - name: Push only if fast-forward is possible
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x # CI debugging. comment out/delete if needed. 
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
          if git push origin main; then echo "‚úÖ Push successful. Fork is up to date."; else echo "::warning: ‚ùå Push failed. Manual sync required."; exit 0; fi

      - name: Tag a pre-release build (new feature)
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=$(git rev-parse --short HEAD)
          PRERELEASE_TAG="v0.0.1-dev+${TIMESTAMP}-${SHORT_SHA}"

          git tag "$PRERELEASE_TAG"
          git push origin "$PRERELEASE_TAG"

          echo "üè∑Ô∏è Tagged pre-release: $PRERELEASE_TAG"
