name: LnOS CI/CD

on:
  push:
    branches: [main]
  schedule:
    - cron: '0 22 * * 5'  # Runs every Friday at 4:00 PM CST (22:00 UTC)
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  sync-source-tree:
    runs-on: ubuntu-latest

    steps:
      - name: Set workflow for origin/main branch only
        if: github.ref != 'refs/heads/main'
        run: |
          echo "üö´ CI/CD workflow is set to 'main' branch only. Exiting."
          exit 1

      - name: Checkout from fork (bots)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Git credentials
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Set GitHub authentications for GH runners (bots)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git

      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/uta-lug-nuts/LnOS.git
          git fetch upstream

      - name: Sync fork/main with upstream/main
        run: |
          git checkout main
          echo "üîÑ Merging upstream/main with fork/main..."
          git merge upstream/main --no-edit --strategy=recursive -X ours || {
            echo "‚ùå Merge conflict detected. Auto-merge failed. Aborting to preserve fork state.";
            git merge --abort;
            exit 1;
          }

      - name: Compare if diffs from upstream/main
        run: |
          echo "üîç Comparing origin/main with upstream/main..."
          BEHIND=$(git log origin/main..upstream/main --oneline | wc -l)
          AHEAD=$(git log upstream/main..origin/main --oneline | wc -l)
          echo "üìâ Commits behind upstream: $BEHIND"
          echo "üìà Commits ahead of upstream: $AHEAD"
          if [ "$BEHIND" -eq 0 ] && [ "$AHEAD" -eq 0 ]; then
            echo "‚úÖ Fork is in sync with upstream/main."
          elif [ "$BEHIND" -gt 0 ]; then
            echo "::notice ::‚ö†Ô∏è Fork is $BEHIND commits behind upstream."
          elif [ "$AHEAD" -gt 0 ]; then
            echo "::notice ::üöÄ Fork is $AHEAD commits ahead of upstream."
          fi

      - name: Verify runner's fork is up to date on origin/main
        run: |
          git fetch origin

          LOCAL_HEAD=$(git rev-parse HEAD)
          ORIGIN_MAIN=$(git rev-parse origin/main)

          echo "üîé HEAD commit:         $LOCAL_HEAD"
          echo "üîé origin/main commit:  $ORIGIN_MAIN"

          if [ "$LOCAL_HEAD" != "$ORIGIN_MAIN" ]; then
            echo "::error ::Local main has diverged from origin/main. Manual checks may be needed."
            echo "üìú Commit differences:"
            git log --oneline origin/main..HEAD
            exit 1
          else
            echo "‚úÖ GH runner's fork with main matches origin/main. No push needed."
          fi

      - name: Validate fast-forward push with --dry-run
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git
          echo "üß™ Dry-run: checking if push to origin/main is fast-forward..."
          if git push --dry-run origin main; then
            echo "‚úÖ Dry-run successful. Safe to push."
          else
            echo "::warning ::‚ùå Dry-run failed. Push would not fast-forward. Skipping push."
            exit 0
          fi

      - name: Push only if fast-forward is possible
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          git push origin main
          echo "‚úÖ Push successful. Fork is up to date."

      #- name: Tag a dev pre-release build
      #  run: |
      #    TIMESTAMP=$(date +%Y%m%d%H%M%S)
      #    SHORT_SHA=$(git rev-parse --short HEAD)
      #    PRERELEASE_TAG="v0.1.0-dev+main-${TIMESTAMP}-${SHORT_SHA}"
      #
      #    git tag "$PRERELEASE_TAG"
      #    git push origin "$PRERELEASE_TAG"
      #
      #    echo "üè∑Ô∏è Tagged pre-release for main: $PRERELEASE_TAG"

